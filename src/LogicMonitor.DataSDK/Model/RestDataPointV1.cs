/*
 * LogicMonitor API-Ingest Rest API
 *
 * LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. API-Ingest provides the entry point in the form of public rest APIs for ingesting metrics into LogicMonitor. For using this application users have to create LMAuth token using access id and key from santaba.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;

namespace LogicMonitor.DataSDK.Model
{
    /// <summary>
    /// RestDataPointV1
    /// </summary>
    [DataContract(Name = "RestDataPointV1")]
    public partial class RestDataPointV1 : IEquatable<RestDataPointV1>, IValidatableObject
    {
        public RestDataPointV1()
        {

        }
        /// <summary>
        /// Initializes a new instance of the <see cref="RestDataPointV1" /> class.
        /// </summary>
        /// <param name="dataPointAggregationType">dataPointAggregationType.</param>
        /// <param name="dataPointDescription">dataPointDescription.</param>
        /// <param name="dataPointName">dataPointName.</param>
        /// <param name="dataPointType">dataPointType.</param>
        /// <param name="values">values.</param>
        public RestDataPointV1(string dataPointAggregationType = default(string), string dataPointDescription = default(string), string dataPointName = default(string), string dataPointType = default(string), Dictionary<string, string> values = default(Dictionary<string, string>))
        {
            this.DataPointAggregationType = dataPointAggregationType;
            this.DataPointDescription = dataPointDescription;
            this.DataPointName = dataPointName;
            this.DataPointType = dataPointType;
            this.Values = values;
        }

        /// <summary>
        /// Gets or Sets DataPointAggregationType
        /// </summary>
        [DataMember(Name = "dataPointAggregationType", EmitDefaultValue = false)]
        public string DataPointAggregationType { get; set; }

        /// <summary>
        /// Gets or Sets DataPointDescription
        /// </summary>
        [DataMember(Name = "dataPointDescription", EmitDefaultValue = false)]
        public string DataPointDescription { get; set; }

        /// <summary>
        /// Gets or Sets DataPointName
        /// </summary>
        [DataMember(Name = "dataPointName", EmitDefaultValue = false)]
        public string DataPointName { get; set; }

        /// <summary>
        /// Gets or Sets DataPointType
        /// </summary>
        [DataMember(Name = "dataPointType", EmitDefaultValue = false)]
        public string DataPointType { get; set; }

        /// <summary>
        /// Gets or Sets Values
        /// </summary>
        [DataMember(Name = "values", EmitDefaultValue = false)]
        public Dictionary<string, string> Values { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RestDataPointV1 {\n");
            sb.Append("  DataPointAggregationType: ").Append(DataPointAggregationType).Append("\n");
            sb.Append("  DataPointDescription: ").Append(DataPointDescription).Append("\n");
            sb.Append("  DataPointName: ").Append(DataPointName).Append("\n");
            sb.Append("  DataPointType: ").Append(DataPointType).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RestDataPointV1);
        }

        /// <summary>
        /// Returns true if RestDataPointV1 instances are equal
        /// </summary>
        /// <param name="input">Instance of RestDataPointV1 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RestDataPointV1 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DataPointAggregationType == input.DataPointAggregationType ||
                    (this.DataPointAggregationType != null &&
                    this.DataPointAggregationType.Equals(input.DataPointAggregationType))
                ) && 
                (
                    this.DataPointDescription == input.DataPointDescription ||
                    (this.DataPointDescription != null &&
                    this.DataPointDescription.Equals(input.DataPointDescription))
                ) && 
                (
                    this.DataPointName == input.DataPointName ||
                    (this.DataPointName != null &&
                    this.DataPointName.Equals(input.DataPointName))
                ) && 
                (
                    this.DataPointType == input.DataPointType ||
                    (this.DataPointType != null &&
                    this.DataPointType.Equals(input.DataPointType))
                ) && 
                (
                    this.Values == input.Values ||
                    this.Values != null &&
                    input.Values != null &&
                    this.Values.SequenceEqual(input.Values)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DataPointAggregationType != null)
                    hashCode = hashCode * 59 + this.DataPointAggregationType.GetHashCode();
                if (this.DataPointDescription != null)
                    hashCode = hashCode * 59 + this.DataPointDescription.GetHashCode();
                if (this.DataPointName != null)
                    hashCode = hashCode * 59 + this.DataPointName.GetHashCode();
                if (this.DataPointType != null)
                    hashCode = hashCode * 59 + this.DataPointType.GetHashCode();
                if (this.Values != null)
                    hashCode = hashCode * 59 + this.Values.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
