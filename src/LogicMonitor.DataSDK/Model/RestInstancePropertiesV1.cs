/*
 * LogicMonitor API-Ingest Rest API
 *
 * LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. API-Ingest provides the entry point in the form of public rest APIs for ingesting metrics into LogicMonitor. For using this application users have to create LMAuth token using access id and key from santaba.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;

namespace LogicMonitor.DataSDK.Model
{
    /// <summary>
    /// RestInstancePropertiesV1
    /// </summary>
    [DataContract(Name = "RestInstancePropertiesV1")]
    public partial class RestInstancePropertiesV1 : IEquatable<RestInstancePropertiesV1>, IValidatableObject
    {
        public RestInstancePropertiesV1()
        {

        }
        /// <summary>
        /// Initializes a new instance of the <see cref="RestInstancePropertiesV1" /> class.
        /// </summary>
        /// <param name="dataSource">dataSource.</param>
        /// <param name="dataSourceDisplayName">dataSourceDisplayName.</param>
        /// <param name="instanceId">instanceId.</param>
        /// <param name="instanceName">instanceName.</param>
        /// <param name="instanceProperties">instanceProperties.</param>
        /// <param name="resourceIds">resourceIds.</param>
        public RestInstancePropertiesV1(string dataSource = default(string), string dataSourceDisplayName = default(string), int instanceId = default(int), string instanceName = default(string), Dictionary<string, string> instanceProperties = default(Dictionary<string, string>), Dictionary<string, string> resourceIds = default(Dictionary<string, string>))
        {
            this.DataSource = dataSource;
            this.DataSourceDisplayName = dataSourceDisplayName;
            this.InstanceId = instanceId;
            this.InstanceName = instanceName;
            this.InstanceProperties = instanceProperties;
            this.ResourceIds = resourceIds;
        }

        /// <summary>
        /// Gets or Sets DataSource
        /// </summary>
        [DataMember(Name = "dataSource", EmitDefaultValue = false)]
        public string DataSource { get; set; }

        /// <summary>
        /// Gets or Sets DataSourceDisplayName
        /// </summary>
        [DataMember(Name = "dataSourceDisplayName", EmitDefaultValue = false)]
        public string DataSourceDisplayName { get; set; }

        /// <summary>
        /// Gets or Sets InstanceId
        /// </summary>
        [DataMember(Name = "instanceId", EmitDefaultValue = false)]
        public int InstanceId { get; set; }

        /// <summary>
        /// Gets or Sets InstanceName
        /// </summary>
        [DataMember(Name = "instanceName", EmitDefaultValue = false)]
        public string InstanceName { get; set; }

        /// <summary>
        /// Gets or Sets InstanceProperties
        /// </summary>
        [DataMember(Name = "instanceProperties", EmitDefaultValue = false)]
        public Dictionary<string, string> InstanceProperties { get; set; }

        /// <summary>
        /// Gets or Sets ResourceIds
        /// </summary>
        [DataMember(Name = "resourceIds", EmitDefaultValue = false)]
        public Dictionary<string, string> ResourceIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RestInstancePropertiesV1 {\n");
            sb.Append("  DataSource: ").Append(DataSource).Append("\n");
            sb.Append("  DataSourceDisplayName: ").Append(DataSourceDisplayName).Append("\n");
            sb.Append("  InstanceId: ").Append(InstanceId).Append("\n");
            sb.Append("  InstanceName: ").Append(InstanceName).Append("\n");
            sb.Append("  InstanceProperties: ").Append(InstanceProperties).Append("\n");
            sb.Append("  ResourceIds: ").Append(ResourceIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RestInstancePropertiesV1);
        }

        /// <summary>
        /// Returns true if RestInstancePropertiesV1 instances are equal
        /// </summary>
        /// <param name="input">Instance of RestInstancePropertiesV1 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RestInstancePropertiesV1 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DataSource == input.DataSource ||
                    (this.DataSource != null &&
                    this.DataSource.Equals(input.DataSource))
                ) && 
                (
                    this.DataSourceDisplayName == input.DataSourceDisplayName ||
                    (this.DataSourceDisplayName != null &&
                    this.DataSourceDisplayName.Equals(input.DataSourceDisplayName))
                ) && 
                (
                    this.InstanceId == input.InstanceId ||
                    this.InstanceId.Equals(input.InstanceId)
                ) && 
                (
                    this.InstanceName == input.InstanceName ||
                    (this.InstanceName != null &&
                    this.InstanceName.Equals(input.InstanceName))
                ) && 
                (
                    this.InstanceProperties == input.InstanceProperties ||
                    this.InstanceProperties != null &&
                    input.InstanceProperties != null &&
                    this.InstanceProperties.SequenceEqual(input.InstanceProperties)
                ) && 
                (
                    this.ResourceIds == input.ResourceIds ||
                    this.ResourceIds != null &&
                    input.ResourceIds != null &&
                    this.ResourceIds.SequenceEqual(input.ResourceIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DataSource != null)
                    hashCode = hashCode * 59 + this.DataSource.GetHashCode();
                if (this.DataSourceDisplayName != null)
                    hashCode = hashCode * 59 + this.DataSourceDisplayName.GetHashCode();
                hashCode = hashCode * 59 + this.InstanceId.GetHashCode();
                if (this.InstanceName != null)
                    hashCode = hashCode * 59 + this.InstanceName.GetHashCode();
                if (this.InstanceProperties != null)
                    hashCode = hashCode * 59 + this.InstanceProperties.GetHashCode();
                if (this.ResourceIds != null)
                    hashCode = hashCode * 59 + this.ResourceIds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
